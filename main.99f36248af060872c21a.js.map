{"version":3,"sources":["webpack:///./js/classPort.js","webpack:///./index.js"],"names":["Port","id","incline","this","isFull","isOccupied","TWEEN","require","app","PIXI","width","height","backgroundColor","resolution","window","devicePixelRatio","document","body","appendChild","view","container","stage","addChild","Graphics","shipsIDArray","shipsArray","shipsInQueue","topWall","lineStyle","moveTo","lineTo","x","y","bottomWall","containerRef","querySelector","portBox1","createElement","portBox2","portBox3","portBox4","classList","add","port1","port2","port3","port4","portBoxesArray","portsArray","moveShip","ship","positionLeft","positionTop","Tween","left","top","to","easing","Easing","Linear","None","onUpdate","object","updateBox","start","animate","time","requestAnimationFrame","update","getRandomInt","Math","floor","random","type","isLoaded","color","bg","direction","createShip","paramsObject","push","newShip","length","beginFill","drawRect","endFill","pivot","filteredPort","find","el","rotation","goingToPort","checkforFreePorts","checkforLoadedPorts","definePort","switchActionsInPort","port","tint","indexOf","style","ShipUnloading","ShipLoading","checkPoint1","box","params","setTimeout","checkPoint1back","pop","splice","hideShip","console","log","checkBaypass","definePortAfterQueue","shift","checkforFreePortsAfterQueue","checkforLoadedPortsAfterQueue","checkShipsInQueue","onload","setInterval"],"mappings":"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","file":"main.99f36248af060872c21a.js","sourcesContent":["class Port {\r\n    constructor(id, incline) {\r\nthis.id = id;\r\nthis.isFull = false;\r\nthis.isOccupied = false;\r\nthis.incline = incline;\r\n    }\r\n};\r\n\r\nexport default Port;","import './styles.css';\r\nimport * as PIXI from 'pixi.js'\r\nimport Ship from './js/classShip';\r\nimport Port from './js/classPort';\r\nconst TWEEN = require('@tweenjs/tween.js')\r\n\r\nconst app = new PIXI.Application({\r\n    width: 800, height: 800, backgroundColor: 0x1099bb, resolution: window.devicePixelRatio || 1,\r\n});\r\ndocument.body.appendChild(app.view);\r\n\r\nconst container = new PIXI.Container();\r\n\r\napp.stage.addChild(container);\r\nlet Graphics = PIXI.Graphics;\r\n\r\nlet shipsIDArray = [];\r\nlet shipsArray = [];\r\nlet shipsInQueue = [];\r\n\r\nlet topWall = new Graphics();\r\ntopWall.lineStyle(4, 0xffffff, 1);\r\ntopWall.moveTo(30, 200);\r\ntopWall.lineTo(30, 0);\r\ntopWall.x = 300;\r\ntopWall.y = 0;\r\napp.stage.addChild(topWall);\r\n\r\nlet bottomWall = new Graphics();\r\nbottomWall.lineStyle(4, 0xffffff, 1);\r\nbottomWall.moveTo(30, 400);\r\nbottomWall.lineTo(30, 600);\r\nbottomWall.x = 300;\r\nbottomWall.y = 0;\r\napp.stage.addChild(bottomWall);\r\n\r\nconst containerRef = document.querySelector('.container');\r\nconst portBox1 = document.createElement('div');\r\nconst portBox2 = document.createElement('div');\r\nconst portBox3 = document.createElement('div');\r\nconst portBox4 = document.createElement('div');\r\nportBox1.classList.add('port');\r\nportBox1.classList.add('port-1');\r\nportBox2.classList.add('port');\r\nportBox2.classList.add('port-2');\r\nportBox3.classList.add('port');\r\nportBox3.classList.add('port-3');\r\nportBox4.classList.add('port');\r\nportBox4.classList.add('port-4');\r\ncontainerRef.appendChild(portBox1);\r\ncontainerRef.appendChild(portBox2);\r\ncontainerRef.appendChild(portBox3);\r\ncontainerRef.appendChild(portBox4);\r\n\r\nlet port1 = new Port(1, 48);\r\nlet port2 = new Port(2, 0.3);\r\nlet port3 = new Port(3, 2.8);\r\nlet port4 = new Port(4, 2.3);\r\n\r\nconst portBoxesArray = [portBox1, portBox2, portBox3, portBox4];\r\nconst portsArray = [port1, port2, port3, port4];\r\n\r\nwindow.onload = function () {\r\n    createShip(getRandomInt());\r\n    setInterval(() => { createShip(getRandomInt()) }, 8000);\r\n    animate()\r\n}\r\n\r\n   \r\nfunction moveShip(ship, positionLeft, positionTop) {\r\n\r\n    let tween1 = new TWEEN.Tween({ left: `${ship.x}`, top: `${ship.y}` })\r\n        \r\n        .to({ left: `${positionLeft}`, top: `${positionTop}` }, 4000)\r\n        .easing(TWEEN.Easing.Linear.None)\r\n        .onUpdate(function (object) {\r\n            updateBox(ship, object)\r\n        })\r\n        .start()\r\n\r\n    updateBox(ship, { left: `${ship.y}`, top: `${ship.x}` })\r\n}\r\n\r\nfunction animate(time) {\r\n    \r\n    requestAnimationFrame(animate)\r\n    TWEEN.update(time)\r\n}\r\n\r\nfunction getRandomInt() {\r\n    let result = Math.floor(Math.random() * Math.floor(2));\r\n    if (result) {\r\n        return {type: 'green', isLoaded: false, color: 0x00ff00, bg: 0xffffff, direction: 'toPort'}\r\n    } \r\n    return {type: 'red', isLoaded: true, color: 0xff0000, bg: 0xff0000, direction: 'toPort'}\r\n}\r\n\r\nfunction createShip(paramsObject) {\r\n    shipsIDArray.push('ship');\r\n    let newShip = new Graphics();\r\n    newShip.id = shipsIDArray.length;\r\n    newShip.type = paramsObject.type;\r\n    newShip.isLoaded = paramsObject.isLoaded;\r\n    newShip.color = paramsObject.color;\r\n    newShip.bg = paramsObject.bg;\r\n    newShip.direction = paramsObject.direction;\r\nnewShip.lineStyle(3, `${paramsObject.color}`, 1);\r\nnewShip.beginFill(paramsObject.bg);\r\nnewShip.drawRect(0, 0, 60, 24);\r\nnewShip.endFill();\r\nnewShip.x = 760;\r\nnewShip.y = 290;\r\nnewShip.pivot.x = newShip.width/2;\r\nnewShip.pivot.y = newShip.height/2;\r\n    app.stage.addChild(newShip);\r\n    shipsArray.push(newShip);\r\n    definePort(portsArray, newShip);\r\n    \r\n    return newShip;\r\n}\r\n\r\nfunction choosePortOrBaypass(ship) {\r\n    if (ship.type === 'red') {\r\nlet filteredPort = portsArray.find(el => el.isFull === false && el.isOccupied === false);\r\n        filteredPort ? moveShip(ship, 270, 290) : moveShip(ship, 700, 240);\r\n        return;\r\n    }\r\n    let filteredPort = portsArray.find(el => el.isFull === true && el.isOccupied === false);\r\n    filteredPort ? moveShip(ship, 270, 290) : moveShip(ship, 700, 240);\r\n    return;\r\n}\r\n\r\nfunction checkBaypass(ship) {\r\n    if (ship.x === 700 && ship.y === 240) {\r\n     switch (shipsInQueue.length) {\r\n         case 0: {\r\n             moveShip(ship, 400, 240)\r\n             ship.rotation = 0;\r\n             shipsInQueue.push(ship);\r\n             break;\r\n         };\r\n            \r\n         case 1: {\r\n             moveShip(ship, 500, 240);\r\n             ship.rotation = 0;\r\n             shipsInQueue.push(ship);\r\n             break;\r\n         }\r\n              case 2: {\r\n             moveShip(ship, 600, 240);\r\n             ship.rotation = 0;\r\n             shipsInQueue.push(ship);\r\n             break;\r\n         }\r\n             default: console.log('Full queue');\r\n    }\r\n}\r\n}\r\n\r\nfunction definePort(portsArray, ship) {\r\n    ship.type === \"red\" ? checkforFreePorts(portsArray, ship) : checkforLoadedPorts(portsArray, ship);\r\n}\r\n\r\nfunction checkforFreePorts(portsArray, ship) {\r\n    let filteredPort = portsArray.find(el => el.isFull === false && el.isOccupied === false);\r\n    if (!filteredPort) {\r\n        moveShip(ship, 700, 240);\r\n        ship.rotation = 48;\r\n        return;\r\n    }\r\n    filteredPort.isOccupied = true;\r\n    ship.goingToPort = filteredPort.id;\r\n    moveShip(ship, 270, 290);\r\n    return filteredPort;\r\n}\r\n\r\nfunction checkforLoadedPorts(portsArray, ship) {\r\n    let filteredPort = portsArray.find(el => el.isFull === true && el.isOccupied === false);\r\n    if (!filteredPort) {\r\n        moveShip(ship, 700, 240);\r\n        ship.rotation = 48;\r\n        return;\r\n    }\r\n    filteredPort.isOccupied = true;\r\n    ship.goingToPort = filteredPort.id;\r\n    moveShip(ship, 270, 290);\r\n    return filteredPort;\r\n}\r\n\r\nfunction switchActionsInPort(ship, port) {\r\n    (ship.type === \"red\") ?  ShipUnloading(ship, port) : ShipLoading(ship, port) ;\r\n}\r\n\r\nfunction ShipUnloading(ship, port) {\r\n    \r\n    ship.tint = 0x000000;\r\n    portBoxesArray[`${portsArray.indexOf(port)}`].style.backgroundColor = 'rgb(255, 215, 0)';\r\n    port.isFull = true;\r\n    ship.isLoaded = false;\r\n    moveShip(ship, 270, 330);\r\n    port.isOccupied = false;\r\n    ship.rotation = port.incline;\r\n}\r\n\r\nfunction ShipLoading(ship, port) {\r\n    \r\n    ship.tint = 0x00ff00;\r\n    portBoxesArray[`${portsArray.indexOf(port)}`].style.backgroundColor = 'rgb(255, 255, 255)';\r\n    port.isFull = false;\r\n    ship.isLoaded = true;\r\n    moveShip(ship, 270, 330);\r\n    port.isOccupied = false;\r\n    ship.rotation = port.incline;\r\n}\r\n\r\nfunction checkPoint1(ship) {\r\n    if (ship.x === 270 && ship.y === 290) {\r\n        switch (ship.goingToPort) {\r\n            case 1:\r\n                moveShip(ship, 60, 120);\r\n                ship.rotation = port1.incline;\r\n                break;\r\n            case 2:\r\n                moveShip(ship, 60, 234);\r\n                ship.rotation = port2.incline;\r\n                break;\r\n            case 3:\r\n                moveShip(ship, 60, 366);\r\n                ship.rotation = port3.incline;\r\n                break;\r\n            case 4:\r\n                ship.rotation = 2.3;\r\n                moveShip(ship, 60, 498);\r\n                ship.rotation = port4.incline;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction checkPoint1back(ship) {\r\n    if (ship.x === 270 && ship.y === 330) {\r\n        ship.rotation = 0;\r\n        moveShip(ship, 760, 330);\r\n        \r\n    }\r\n}\r\n\r\nfunction checkPort(ship) {\r\n    if (ship.x === 60 && ship.y === 120) {\r\n        ship.rotation = 0;\r\n        \r\n        return setTimeout(() => { switchActionsInPort(ship, port1) }, 5000);\r\n    }\r\n    if (ship.x === 60 && ship.y === 234) {\r\n        ship.rotation = 0;\r\n        return setTimeout(() => { switchActionsInPort(ship, port2) }, 5000);\r\n    }\r\n    if (ship.x === 60 && ship.y === 366) {\r\n        ship.rotation = 0;\r\n        return setTimeout(() => { switchActionsInPort(ship, port3) }, 5000);\r\n    }\r\n    if (ship.x === 60 && ship.y === 498) {\r\n         ship.rotation = 0;\r\n        return setTimeout(() => { switchActionsInPort(ship, port4) }, 5000);\r\n    }\r\n}\r\n\r\nfunction hideShip(ship) {\r\n    if (ship.x === 760 && ship.y === 330) {\r\n        ship.width = 0;\r\n        ship.height = 0;\r\n        shipsIDArray.pop();\r\n        shipsArray.splice(ship.id - 1, 1);\r\n    }\r\n}\r\n\r\nfunction checkShipsInQueue(ship) {\r\n    if (ship.x === 400 && ship.y === 240 ) {\r\n        if (ship.type === 'green') {\r\n        let filteredPort = portsArray.find(el => !el.isOccupied && el.isFull)\r\n        if (!filteredPort) {\r\n            return;\r\n            }\r\n            moveShip(shipsInQueue[0], 270, 290);\r\n            definePortAfterQueue(portsArray, shipsInQueue[0])\r\n             shipsInQueue.shift(shipsInQueue[0]);\r\n            moveShip(shipsInQueue[0], 400, 240);\r\n           \r\n        }\r\n        else if (ship.type === 'red') {\r\n        let filteredPort = portsArray.find(el => !el.isOccupied && !el.isFull)\r\n        if (!filteredPort) {\r\n            return;\r\n            }\r\n            moveShip(shipsInQueue[0], 270, 290);\r\n            definePortAfterQueue(portsArray, shipsInQueue[0])\r\n            shipsInQueue.shift(shipsInQueue[0]);\r\n            moveShip(shipsInQueue[0], 400, 240);\r\n        }\r\n    }\r\n\r\n    function definePortAfterQueue(portsArray, ship) {\r\n    ship.type === \"red\" ? checkforFreePortsAfterQueue(portsArray, ship) : checkforLoadedPortsAfterQueue(portsArray, ship);\r\n}\r\n\r\nfunction checkforFreePortsAfterQueue(portsArray, ship) {\r\n    let filteredPort = portsArray.find(el => el.isFull === false && el.isOccupied === false);\r\n    if (!filteredPort) {\r\n        return;\r\n    }\r\n    filteredPort.isOccupied = true;\r\n    ship.goingToPort = filteredPort.id;\r\n    return filteredPort;\r\n    }\r\n    \r\n    function checkforLoadedPortsAfterQueue(portsArray, ship) {\r\n    let filteredPort = portsArray.find(el => el.isFull === true && el.isOccupied === false);\r\n    if (!filteredPort) {\r\n        return;\r\n    }\r\n    filteredPort.isOccupied = true;\r\n    ship.goingToPort = filteredPort.id;\r\n    return filteredPort;\r\n}\r\n}\r\n\r\nfunction updateBox(box, params) {\r\n    box.x = params.left;\r\n    box.y = params.top;\r\n    checkPoint1(box);\r\n    checkPort(box);\r\n    checkPoint1back(box);\r\n    checkPoint1(box);\r\n    hideShip(box);\r\n    checkBaypass(box);\r\n    if (shipsInQueue.length > 0) {\r\n    checkShipsInQueue(shipsInQueue[0]);\r\n    }   \r\n}  \r\n\r\n\r\n\r\n"],"sourceRoot":""}